1 300
1 2
5
1 800
1 4
11
5
1 120
6
41
50
push 300
push 2
mul
push 800
push 4
div
add
push 120
sub
out
htl

push 20
pop rax
NEXT:
push rax
push rax
mul
out
push rax
push 1
add
pop rax
push rax
push 10
jb NEXT
htl


push 1
push 0
push -4
call DISCR
push rax
out
htl
DISCR:
pop rcx
pop rbx
pop rax
push rbx
push rbx
mul
push 4
push rax
push rcx
mul
mul
sub
pop rax
ret


push 7
pop rax
call FIBO
htl
FIBO:
push rax
push 2
jbe BAZA
push rax
push 1
sub
pop rax
push rax
push 1
sub
call FIBO
pop rax
push rbx
call FIBO
push rbx
add
pop rbx
push rbx
out
ret
BAZA:
push 1
pop rbx
ret



LOOOOP

push 0
pop rax
LOOP:
push rcx
pop rax
push rax
push 1
add
pop rax
push rax
pop rcx
call FIBO
push rbx
out
push rcx
push 15
jb LOOP
htl
FIBO:
push rax
push 2
jbe BAZA
push rax
push 1
sub
pop rax
push rax
push 1
sub
call FIBO
pop rax
push rbx
call FIBO
push rbx
add
pop rbx
ret
BAZA:
push 1
pop rbx
ret



KVADRATKA




call MAIN
htl
MAIN:
push -1
pop rax
push -1
pop rbx
LOOP_J:
push rax
push 1
add
pop rax
push 100
out
push rax
out
LOOP_I:
push rbx
push 1
add
push 200
out
pop rbx
push rbx
out
push 25
push 5
push rax
sub
push 5
push rax
sub
mul
push 5
push rbx
sub
push 5
push rbx
sub
mul
add
call RAM
push rbx
push 9
jbe LOOP_I
push rax
push 9
jbe LOOP_J
ret
RAM:
jbe CHECK
ret
CHECK:
push rax
push 11
mul
push rbx
pop rax
add
pop rcx
push 1
pop [rcx]
ret




call MAIN
draw
htl
MAIN:
push 1
pop [12]
push 1
pop [24]
ret












+__________________

call MAIN
draw
htl
MAIN:
push 2
pop rax
push 0
pop rbx
LOOP:
push rbx
push 1
add
pop rbx
call RAM
push rbx
push 10
jne LOOP
ret
RAM:
push rax
push 11
mul
push rbx
add
pop rcx
push 1
push rcx
out
pop [rcx]
ret